                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module max7219
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _memset
                                     12 	.globl _GPIO_WriteLow
                                     13 	.globl _GPIO_WriteHigh
                                     14 	.globl _GPIO_Init
                                     15 	.globl _matrix
                                     16 	.globl _MaxMatrix
                                     17 	.globl _setCommand
                                     18 	.globl _Init
                                     19 	.globl _setIntensity
                                     20 	.globl _Clear
                                     21 	.globl _Screen
                                     22 	.globl _setDot
                                     23 	.globl _setColumn
                                     24 	.globl _setRow
                                     25 	.globl _DrawEx
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area DATA
      0000D3                         30 _matrix::
      0000D3                         31 	.ds 86
                                     32 ;--------------------------------------------------------
                                     33 ; ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area INITIALIZED
                                     36 ;--------------------------------------------------------
                                     37 ; absolute external ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area DABS (ABS)
                                     40 ;--------------------------------------------------------
                                     41 ; global & static initialisations
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area GSINIT
                                     45 	.area GSFINAL
                                     46 	.area GSINIT
                                     47 ;--------------------------------------------------------
                                     48 ; Home
                                     49 ;--------------------------------------------------------
                                     50 	.area HOME
                                     51 	.area HOME
                                     52 ;--------------------------------------------------------
                                     53 ; code
                                     54 ;--------------------------------------------------------
                                     55 	.area CODE
                                     56 ;	user/max7219.c: 7: static void delay_ms(uint8_t x)
                                     57 ;	-----------------------------------------
                                     58 ;	 function delay_ms
                                     59 ;	-----------------------------------------
      008AA8                         60 _delay_ms:
      008AA8 88               [ 1]   61 	push	a
                                     62 ;	user/max7219.c: 9: while(x--);
      008AA9 7B 04            [ 1]   63 	ld	a, (0x04, sp)
      008AAB                         64 00101$:
      008AAB 6B 01            [ 1]   65 	ld	(0x01, sp), a
      008AAD 4A               [ 1]   66 	dec	a
      008AAE 0D 01            [ 1]   67 	tnz	(0x01, sp)
      008AB0 26 F9            [ 1]   68 	jrne	00101$
      008AB2 84               [ 1]   69 	pop	a
      008AB3 81               [ 4]   70 	ret
                                     71 ;	user/max7219.c: 12: void MaxMatrix(GPIO_TypeDef* port, uint8_t data, uint8_t cs, uint8_t clk, uint8_t numLed)
                                     72 ;	-----------------------------------------
                                     73 ;	 function MaxMatrix
                                     74 ;	-----------------------------------------
      008AB4                         75 _MaxMatrix:
      008AB4 89               [ 2]   76 	pushw	x
                                     77 ;	user/max7219.c: 14: matrix.port = port;
      008AB5 AE 00 D3         [ 2]   78 	ldw	x, #_matrix+0
      008AB8 16 05            [ 2]   79 	ldw	y, (0x05, sp)
      008ABA FF               [ 2]   80 	ldw	(x), y
                                     81 ;	user/max7219.c: 15: matrix.data = data;
      008ABB AE 00 D3         [ 2]   82 	ldw	x, #_matrix+0
      008ABE 1F 01            [ 2]   83 	ldw	(0x01, sp), x
      008AC0 1E 01            [ 2]   84 	ldw	x, (0x01, sp)
      008AC2 5C               [ 2]   85 	incw	x
      008AC3 5C               [ 2]   86 	incw	x
      008AC4 7B 07            [ 1]   87 	ld	a, (0x07, sp)
      008AC6 F7               [ 1]   88 	ld	(x), a
                                     89 ;	user/max7219.c: 16: matrix.cs = cs;
      008AC7 1E 01            [ 2]   90 	ldw	x, (0x01, sp)
      008AC9 7B 08            [ 1]   91 	ld	a, (0x08, sp)
      008ACB E7 03            [ 1]   92 	ld	(0x0003, x), a
                                     93 ;	user/max7219.c: 17: matrix.clk = clk;
      008ACD 1E 01            [ 2]   94 	ldw	x, (0x01, sp)
      008ACF 7B 09            [ 1]   95 	ld	a, (0x09, sp)
      008AD1 E7 04            [ 1]   96 	ld	(0x0004, x), a
                                     97 ;	user/max7219.c: 18: matrix.maxLed =  numLed;
      008AD3 1E 01            [ 2]   98 	ldw	x, (0x01, sp)
      008AD5 7B 0A            [ 1]   99 	ld	a, (0x0a, sp)
      008AD7 E7 05            [ 1]  100 	ld	(0x0005, x), a
                                    101 ;	user/max7219.c: 19: memset(matrix.buffer, 0x00, sizeof(matrix.buffer));
      008AD9 1E 01            [ 2]  102 	ldw	x, (0x01, sp)
      008ADB 1C 00 06         [ 2]  103 	addw	x, #0x0006
      008ADE 4B 50            [ 1]  104 	push	#0x50
      008AE0 4B 00            [ 1]  105 	push	#0x00
      008AE2 4B 00            [ 1]  106 	push	#0x00
      008AE4 4B 00            [ 1]  107 	push	#0x00
      008AE6 89               [ 2]  108 	pushw	x
      008AE7 CD 93 73         [ 4]  109 	call	_memset
      008AEA 5B 08            [ 2]  110 	addw	sp, #8
      008AEC 81               [ 4]  111 	ret
                                    112 ;	user/max7219.c: 22: static void Max7219_Write_Byte(uint8_t dat)
                                    113 ;	-----------------------------------------
                                    114 ;	 function Max7219_Write_Byte
                                    115 ;	-----------------------------------------
      008AED                        116 _Max7219_Write_Byte:
      008AED 52 06            [ 2]  117 	sub	sp, #6
                                    118 ;	user/max7219.c: 26: dsent = dat;
      008AEF 7B 09            [ 1]  119 	ld	a, (0x09, sp)
      008AF1 6B 01            [ 1]  120 	ld	(0x01, sp), a
                                    121 ;	user/max7219.c: 27: for(cnt=0; cnt<8; cnt++)
      008AF3 AE 00 D3         [ 2]  122 	ldw	x, #_matrix+0
      008AF6 1F 05            [ 2]  123 	ldw	(0x05, sp), x
      008AF8 1E 05            [ 2]  124 	ldw	x, (0x05, sp)
      008AFA 1C 00 04         [ 2]  125 	addw	x, #0x0004
      008AFD 1F 03            [ 2]  126 	ldw	(0x03, sp), x
      008AFF 0F 02            [ 1]  127 	clr	(0x02, sp)
      008B01                        128 00105$:
                                    129 ;	user/max7219.c: 29: GPIO_WriteLow(matrix.port, matrix.clk);
      008B01 1E 03            [ 2]  130 	ldw	x, (0x03, sp)
      008B03 F6               [ 1]  131 	ld	a, (x)
      008B04 1E 05            [ 2]  132 	ldw	x, (0x05, sp)
      008B06 FE               [ 2]  133 	ldw	x, (x)
      008B07 88               [ 1]  134 	push	a
      008B08 89               [ 2]  135 	pushw	x
      008B09 CD 90 E5         [ 4]  136 	call	_GPIO_WriteLow
      008B0C 5B 03            [ 2]  137 	addw	sp, #3
      008B0E 1E 05            [ 2]  138 	ldw	x, (0x05, sp)
      008B10 FE               [ 2]  139 	ldw	x, (x)
                                    140 ;	user/max7219.c: 31: GPIO_WriteHigh(matrix.port, matrix.data);
      008B11 16 05            [ 2]  141 	ldw	y, (0x05, sp)
      008B13 90 E6 02         [ 1]  142 	ld	a, (0x2, y)
                                    143 ;	user/max7219.c: 30: if(dsent&0x80)
      008B16 0D 01            [ 1]  144 	tnz	(0x01, sp)
      008B18 2A 09            [ 1]  145 	jrpl	00102$
                                    146 ;	user/max7219.c: 31: GPIO_WriteHigh(matrix.port, matrix.data);
      008B1A 88               [ 1]  147 	push	a
      008B1B 89               [ 2]  148 	pushw	x
      008B1C CD 90 DE         [ 4]  149 	call	_GPIO_WriteHigh
      008B1F 5B 03            [ 2]  150 	addw	sp, #3
      008B21 20 07            [ 2]  151 	jra	00103$
      008B23                        152 00102$:
                                    153 ;	user/max7219.c: 33: GPIO_WriteLow(matrix.port, matrix.data);
      008B23 88               [ 1]  154 	push	a
      008B24 89               [ 2]  155 	pushw	x
      008B25 CD 90 E5         [ 4]  156 	call	_GPIO_WriteLow
      008B28 5B 03            [ 2]  157 	addw	sp, #3
      008B2A                        158 00103$:
                                    159 ;	user/max7219.c: 34: GPIO_WriteHigh(matrix.port, matrix.clk);
      008B2A 1E 03            [ 2]  160 	ldw	x, (0x03, sp)
      008B2C F6               [ 1]  161 	ld	a, (x)
      008B2D 1E 05            [ 2]  162 	ldw	x, (0x05, sp)
      008B2F FE               [ 2]  163 	ldw	x, (x)
      008B30 88               [ 1]  164 	push	a
      008B31 89               [ 2]  165 	pushw	x
      008B32 CD 90 DE         [ 4]  166 	call	_GPIO_WriteHigh
      008B35 5B 03            [ 2]  167 	addw	sp, #3
                                    168 ;	user/max7219.c: 35: dsent <<= 1;
      008B37 08 01            [ 1]  169 	sll	(0x01, sp)
                                    170 ;	user/max7219.c: 27: for(cnt=0; cnt<8; cnt++)
      008B39 0C 02            [ 1]  171 	inc	(0x02, sp)
      008B3B 7B 02            [ 1]  172 	ld	a, (0x02, sp)
      008B3D A1 08            [ 1]  173 	cp	a, #0x08
      008B3F 25 C0            [ 1]  174 	jrc	00105$
      008B41 5B 06            [ 2]  175 	addw	sp, #6
      008B43 81               [ 4]  176 	ret
                                    177 ;	user/max7219.c: 39: void setCommand(uint8_t command, uint8_t value)
                                    178 ;	-----------------------------------------
                                    179 ;	 function setCommand
                                    180 ;	-----------------------------------------
      008B44                        181 _setCommand:
      008B44 52 07            [ 2]  182 	sub	sp, #7
                                    183 ;	user/max7219.c: 42: GPIO_WriteLow(matrix.port, matrix.cs);
      008B46 AE 00 D3         [ 2]  184 	ldw	x, #_matrix+0
      008B49 1F 06            [ 2]  185 	ldw	(0x06, sp), x
      008B4B 1E 06            [ 2]  186 	ldw	x, (0x06, sp)
      008B4D 1C 00 03         [ 2]  187 	addw	x, #0x0003
      008B50 1F 02            [ 2]  188 	ldw	(0x02, sp), x
      008B52 1E 02            [ 2]  189 	ldw	x, (0x02, sp)
      008B54 F6               [ 1]  190 	ld	a, (x)
      008B55 1E 06            [ 2]  191 	ldw	x, (0x06, sp)
      008B57 FE               [ 2]  192 	ldw	x, (x)
      008B58 88               [ 1]  193 	push	a
      008B59 89               [ 2]  194 	pushw	x
      008B5A CD 90 E5         [ 4]  195 	call	_GPIO_WriteLow
      008B5D 5B 03            [ 2]  196 	addw	sp, #3
                                    197 ;	user/max7219.c: 43: for(i = 0; i < matrix.maxLed; i++)
      008B5F 16 06            [ 2]  198 	ldw	y, (0x06, sp)
      008B61 17 04            [ 2]  199 	ldw	(0x04, sp), y
      008B63 0F 01            [ 1]  200 	clr	(0x01, sp)
      008B65                        201 00103$:
      008B65 1E 04            [ 2]  202 	ldw	x, (0x04, sp)
      008B67 E6 05            [ 1]  203 	ld	a, (0x5, x)
      008B69 11 01            [ 1]  204 	cp	a, (0x01, sp)
      008B6B 23 12            [ 2]  205 	jrule	00101$
                                    206 ;	user/max7219.c: 45: Max7219_Write_Byte(command);
      008B6D 7B 0A            [ 1]  207 	ld	a, (0x0a, sp)
      008B6F 88               [ 1]  208 	push	a
      008B70 CD 8A ED         [ 4]  209 	call	_Max7219_Write_Byte
      008B73 84               [ 1]  210 	pop	a
                                    211 ;	user/max7219.c: 46: Max7219_Write_Byte(value);
      008B74 7B 0B            [ 1]  212 	ld	a, (0x0b, sp)
      008B76 88               [ 1]  213 	push	a
      008B77 CD 8A ED         [ 4]  214 	call	_Max7219_Write_Byte
      008B7A 84               [ 1]  215 	pop	a
                                    216 ;	user/max7219.c: 43: for(i = 0; i < matrix.maxLed; i++)
      008B7B 0C 01            [ 1]  217 	inc	(0x01, sp)
      008B7D 20 E6            [ 2]  218 	jra	00103$
      008B7F                        219 00101$:
                                    220 ;	user/max7219.c: 48: GPIO_WriteLow(matrix.port, matrix.cs);
      008B7F 1E 02            [ 2]  221 	ldw	x, (0x02, sp)
      008B81 F6               [ 1]  222 	ld	a, (x)
      008B82 1E 06            [ 2]  223 	ldw	x, (0x06, sp)
      008B84 FE               [ 2]  224 	ldw	x, (x)
      008B85 88               [ 1]  225 	push	a
      008B86 89               [ 2]  226 	pushw	x
      008B87 CD 90 E5         [ 4]  227 	call	_GPIO_WriteLow
      008B8A 5B 03            [ 2]  228 	addw	sp, #3
                                    229 ;	user/max7219.c: 49: GPIO_WriteHigh(matrix.port, matrix.cs);
      008B8C 1E 02            [ 2]  230 	ldw	x, (0x02, sp)
      008B8E F6               [ 1]  231 	ld	a, (x)
      008B8F 1E 06            [ 2]  232 	ldw	x, (0x06, sp)
      008B91 FE               [ 2]  233 	ldw	x, (x)
      008B92 88               [ 1]  234 	push	a
      008B93 89               [ 2]  235 	pushw	x
      008B94 CD 90 DE         [ 4]  236 	call	_GPIO_WriteHigh
      008B97 5B 0A            [ 2]  237 	addw	sp, #10
      008B99 81               [ 4]  238 	ret
                                    239 ;	user/max7219.c: 52: void Init(void)
                                    240 ;	-----------------------------------------
                                    241 ;	 function Init
                                    242 ;	-----------------------------------------
      008B9A                        243 _Init:
      008B9A 52 04            [ 2]  244 	sub	sp, #4
                                    245 ;	user/max7219.c: 54: GPIO_Init(matrix.port, matrix.data|matrix.cs|matrix.clk, GPIO_MODE_OUT_PP_HIGH_FAST);
      008B9C AE 00 D3         [ 2]  246 	ldw	x, #_matrix+0
      008B9F 1F 01            [ 2]  247 	ldw	(0x01, sp), x
      008BA1 1E 01            [ 2]  248 	ldw	x, (0x01, sp)
      008BA3 E6 02            [ 1]  249 	ld	a, (0x2, x)
      008BA5 6B 04            [ 1]  250 	ld	(0x04, sp), a
      008BA7 1E 01            [ 2]  251 	ldw	x, (0x01, sp)
      008BA9 E6 03            [ 1]  252 	ld	a, (0x3, x)
      008BAB 1A 04            [ 1]  253 	or	a, (0x04, sp)
      008BAD 6B 03            [ 1]  254 	ld	(0x03, sp), a
      008BAF 1E 01            [ 2]  255 	ldw	x, (0x01, sp)
      008BB1 E6 04            [ 1]  256 	ld	a, (0x4, x)
      008BB3 1A 03            [ 1]  257 	or	a, (0x03, sp)
      008BB5 1E 01            [ 2]  258 	ldw	x, (0x01, sp)
      008BB7 FE               [ 2]  259 	ldw	x, (x)
      008BB8 4B F0            [ 1]  260 	push	#0xf0
      008BBA 88               [ 1]  261 	push	a
      008BBB 89               [ 2]  262 	pushw	x
      008BBC CD 90 4A         [ 4]  263 	call	_GPIO_Init
      008BBF 5B 04            [ 2]  264 	addw	sp, #4
                                    265 ;	user/max7219.c: 55: setCommand(SCANLIMIT, 0x07); //scanf 8digit
      008BC1 4B 07            [ 1]  266 	push	#0x07
      008BC3 4B 0B            [ 1]  267 	push	#0x0b
      008BC5 CD 8B 44         [ 4]  268 	call	_setCommand
      008BC8 85               [ 2]  269 	popw	x
                                    270 ;	user/max7219.c: 56: setCommand(DECODEMODE, 0x00); //use led matrix, not decode digit
      008BC9 4B 00            [ 1]  271 	push	#0x00
      008BCB 4B 09            [ 1]  272 	push	#0x09
      008BCD CD 8B 44         [ 4]  273 	call	_setCommand
      008BD0 85               [ 2]  274 	popw	x
                                    275 ;	user/max7219.c: 57: setCommand(SHUTDOWN, 0x01); // normal operator
      008BD1 4B 01            [ 1]  276 	push	#0x01
      008BD3 4B 0C            [ 1]  277 	push	#0x0c
      008BD5 CD 8B 44         [ 4]  278 	call	_setCommand
      008BD8 85               [ 2]  279 	popw	x
                                    280 ;	user/max7219.c: 58: setCommand(DISPLAYTEST, 0x00); //no display test
      008BD9 4B 00            [ 1]  281 	push	#0x00
      008BDB 4B 0F            [ 1]  282 	push	#0x0f
      008BDD CD 8B 44         [ 4]  283 	call	_setCommand
      008BE0 85               [ 2]  284 	popw	x
                                    285 ;	user/max7219.c: 59: Clear();
      008BE1 CD 8B F8         [ 4]  286 	call	_Clear
                                    287 ;	user/max7219.c: 60: setCommand(INTENSITY, 0x04); // brightness 9/32
      008BE4 4B 04            [ 1]  288 	push	#0x04
      008BE6 4B 0A            [ 1]  289 	push	#0x0a
      008BE8 CD 8B 44         [ 4]  290 	call	_setCommand
      008BEB 5B 06            [ 2]  291 	addw	sp, #6
      008BED 81               [ 4]  292 	ret
                                    293 ;	user/max7219.c: 63: void setIntensity(uint8_t intensity)
                                    294 ;	-----------------------------------------
                                    295 ;	 function setIntensity
                                    296 ;	-----------------------------------------
      008BEE                        297 _setIntensity:
                                    298 ;	user/max7219.c: 65: setCommand(INTENSITY, intensity);
      008BEE 7B 03            [ 1]  299 	ld	a, (0x03, sp)
      008BF0 88               [ 1]  300 	push	a
      008BF1 4B 0A            [ 1]  301 	push	#0x0a
      008BF3 CD 8B 44         [ 4]  302 	call	_setCommand
      008BF6 85               [ 2]  303 	popw	x
      008BF7 81               [ 4]  304 	ret
                                    305 ;	user/max7219.c: 68: void Clear(void)
                                    306 ;	-----------------------------------------
                                    307 ;	 function Clear
                                    308 ;	-----------------------------------------
      008BF8                        309 _Clear:
                                    310 ;	user/max7219.c: 70: memset(matrix.buffer, 0x00, sizeof(matrix.buffer));
      008BF8 AE 00 D9         [ 2]  311 	ldw	x, #_matrix+6
      008BFB 4B 50            [ 1]  312 	push	#0x50
      008BFD 4B 00            [ 1]  313 	push	#0x00
      008BFF 4B 00            [ 1]  314 	push	#0x00
      008C01 4B 00            [ 1]  315 	push	#0x00
      008C03 89               [ 2]  316 	pushw	x
      008C04 CD 93 73         [ 4]  317 	call	_memset
      008C07 5B 06            [ 2]  318 	addw	sp, #6
      008C09 81               [ 4]  319 	ret
                                    320 ;	user/max7219.c: 73: void Screen(void)
                                    321 ;	-----------------------------------------
                                    322 ;	 function Screen
                                    323 ;	-----------------------------------------
      008C0A                        324 _Screen:
      008C0A 52 0D            [ 2]  325 	sub	sp, #13
                                    326 ;	user/max7219.c: 76: for(i = 0; i < 8; i++)
      008C0C AE 00 D3         [ 2]  327 	ldw	x, #_matrix+0
      008C0F 1F 03            [ 2]  328 	ldw	(0x03, sp), x
      008C11 1E 03            [ 2]  329 	ldw	x, (0x03, sp)
      008C13 1C 00 03         [ 2]  330 	addw	x, #0x0003
      008C16 1F 0C            [ 2]  331 	ldw	(0x0c, sp), x
      008C18 0F 01            [ 1]  332 	clr	(0x01, sp)
      008C1A                        333 00106$:
                                    334 ;	user/max7219.c: 79: GPIO_WriteLow(matrix.port, matrix.cs);
      008C1A 1E 0C            [ 2]  335 	ldw	x, (0x0c, sp)
      008C1C F6               [ 1]  336 	ld	a, (x)
      008C1D 1E 03            [ 2]  337 	ldw	x, (0x03, sp)
      008C1F FE               [ 2]  338 	ldw	x, (x)
      008C20 88               [ 1]  339 	push	a
      008C21 89               [ 2]  340 	pushw	x
      008C22 CD 90 E5         [ 4]  341 	call	_GPIO_WriteLow
      008C25 5B 03            [ 2]  342 	addw	sp, #3
                                    343 ;	user/max7219.c: 80: for(j = 0; j < matrix.maxLed; j++)
      008C27 7B 01            [ 1]  344 	ld	a, (0x01, sp)
      008C29 4C               [ 1]  345 	inc	a
      008C2A 6B 0B            [ 1]  346 	ld	(0x0b, sp), a
      008C2C 7B 0B            [ 1]  347 	ld	a, (0x0b, sp)
      008C2E 6B 0A            [ 1]  348 	ld	(0x0a, sp), a
      008C30 1E 03            [ 2]  349 	ldw	x, (0x03, sp)
      008C32 1C 00 06         [ 2]  350 	addw	x, #0x0006
      008C35 1F 08            [ 2]  351 	ldw	(0x08, sp), x
      008C37 16 03            [ 2]  352 	ldw	y, (0x03, sp)
      008C39 17 06            [ 2]  353 	ldw	(0x06, sp), y
      008C3B 7B 01            [ 1]  354 	ld	a, (0x01, sp)
      008C3D 6B 05            [ 1]  355 	ld	(0x05, sp), a
      008C3F 0F 02            [ 1]  356 	clr	(0x02, sp)
      008C41                        357 00104$:
      008C41 1E 06            [ 2]  358 	ldw	x, (0x06, sp)
      008C43 E6 05            [ 1]  359 	ld	a, (0x5, x)
      008C45 11 02            [ 1]  360 	cp	a, (0x02, sp)
      008C47 23 1E            [ 2]  361 	jrule	00101$
                                    362 ;	user/max7219.c: 82: Max7219_Write_Byte(i+1);
      008C49 7B 0A            [ 1]  363 	ld	a, (0x0a, sp)
      008C4B 88               [ 1]  364 	push	a
      008C4C CD 8A ED         [ 4]  365 	call	_Max7219_Write_Byte
      008C4F 84               [ 1]  366 	pop	a
                                    367 ;	user/max7219.c: 83: Max7219_Write_Byte(matrix.buffer[col]);
      008C50 5F               [ 1]  368 	clrw	x
      008C51 7B 05            [ 1]  369 	ld	a, (0x05, sp)
      008C53 97               [ 1]  370 	ld	xl, a
      008C54 72 FB 08         [ 2]  371 	addw	x, (0x08, sp)
      008C57 F6               [ 1]  372 	ld	a, (x)
      008C58 88               [ 1]  373 	push	a
      008C59 CD 8A ED         [ 4]  374 	call	_Max7219_Write_Byte
      008C5C 84               [ 1]  375 	pop	a
                                    376 ;	user/max7219.c: 84: col += 8;
      008C5D 7B 05            [ 1]  377 	ld	a, (0x05, sp)
      008C5F AB 08            [ 1]  378 	add	a, #0x08
      008C61 6B 05            [ 1]  379 	ld	(0x05, sp), a
                                    380 ;	user/max7219.c: 80: for(j = 0; j < matrix.maxLed; j++)
      008C63 0C 02            [ 1]  381 	inc	(0x02, sp)
      008C65 20 DA            [ 2]  382 	jra	00104$
      008C67                        383 00101$:
                                    384 ;	user/max7219.c: 86: GPIO_WriteLow(matrix.port, matrix.cs);
      008C67 1E 0C            [ 2]  385 	ldw	x, (0x0c, sp)
      008C69 F6               [ 1]  386 	ld	a, (x)
      008C6A 1E 03            [ 2]  387 	ldw	x, (0x03, sp)
      008C6C FE               [ 2]  388 	ldw	x, (x)
      008C6D 88               [ 1]  389 	push	a
      008C6E 89               [ 2]  390 	pushw	x
      008C6F CD 90 E5         [ 4]  391 	call	_GPIO_WriteLow
      008C72 5B 03            [ 2]  392 	addw	sp, #3
                                    393 ;	user/max7219.c: 87: GPIO_WriteHigh(matrix.port, matrix.cs);
      008C74 1E 0C            [ 2]  394 	ldw	x, (0x0c, sp)
      008C76 F6               [ 1]  395 	ld	a, (x)
      008C77 1E 03            [ 2]  396 	ldw	x, (0x03, sp)
      008C79 FE               [ 2]  397 	ldw	x, (x)
      008C7A 88               [ 1]  398 	push	a
      008C7B 89               [ 2]  399 	pushw	x
      008C7C CD 90 DE         [ 4]  400 	call	_GPIO_WriteHigh
      008C7F 5B 03            [ 2]  401 	addw	sp, #3
                                    402 ;	user/max7219.c: 76: for(i = 0; i < 8; i++)
      008C81 7B 0B            [ 1]  403 	ld	a, (0x0b, sp)
      008C83 6B 01            [ 1]  404 	ld	(0x01, sp), a
      008C85 7B 0B            [ 1]  405 	ld	a, (0x0b, sp)
      008C87 A1 08            [ 1]  406 	cp	a, #0x08
      008C89 25 8F            [ 1]  407 	jrc	00106$
      008C8B 5B 0D            [ 2]  408 	addw	sp, #13
      008C8D 81               [ 4]  409 	ret
                                    410 ;	user/max7219.c: 91: void setDot(uint8_t col, uint8_t row, uint8_t value)
                                    411 ;	-----------------------------------------
                                    412 ;	 function setDot
                                    413 ;	-----------------------------------------
      008C8E                        414 _setDot:
      008C8E 52 07            [ 2]  415 	sub	sp, #7
                                    416 ;	user/max7219.c: 94: uint8_t n = (matrix.maxLed - 1) - (col / 8);
      008C90 AE 00 D3         [ 2]  417 	ldw	x, #_matrix+0
      008C93 1F 06            [ 2]  418 	ldw	(0x06, sp), x
      008C95 1E 06            [ 2]  419 	ldw	x, (0x06, sp)
      008C97 E6 05            [ 1]  420 	ld	a, (0x5, x)
      008C99 97               [ 1]  421 	ld	xl, a
      008C9A 4A               [ 1]  422 	dec	a
      008C9B 95               [ 1]  423 	ld	xh, a
      008C9C 7B 0A            [ 1]  424 	ld	a, (0x0a, sp)
      008C9E 44               [ 1]  425 	srl	a
      008C9F 44               [ 1]  426 	srl	a
      008CA0 44               [ 1]  427 	srl	a
      008CA1 6B 05            [ 1]  428 	ld	(0x05, sp), a
      008CA3 9E               [ 1]  429 	ld	a, xh
      008CA4 10 05            [ 1]  430 	sub	a, (0x05, sp)
                                    431 ;	user/max7219.c: 95: offset = (n*8 + row);
      008CA6 48               [ 1]  432 	sll	a
      008CA7 48               [ 1]  433 	sll	a
      008CA8 48               [ 1]  434 	sll	a
      008CA9 1B 0B            [ 1]  435 	add	a, (0x0b, sp)
      008CAB 6B 01            [ 1]  436 	ld	(0x01, sp), a
                                    437 ;	user/max7219.c: 96: val = 0x01 << (col%8);
      008CAD 7B 0A            [ 1]  438 	ld	a, (0x0a, sp)
      008CAF A4 07            [ 1]  439 	and	a, #0x07
      008CB1 61               [ 1]  440 	exg	a, yl
      008CB2 A6 01            [ 1]  441 	ld	a, #0x01
      008CB4 61               [ 1]  442 	exg	a, yl
      008CB5 4D               [ 1]  443 	tnz	a
      008CB6 27 06            [ 1]  444 	jreq	00120$
      008CB8                        445 00119$:
      008CB8 61               [ 1]  446 	exg	a, yl
      008CB9 48               [ 1]  447 	sll	a
      008CBA 61               [ 1]  448 	exg	a, yl
      008CBB 4A               [ 1]  449 	dec	a
      008CBC 26 FA            [ 1]  450 	jrne	00119$
      008CBE                        451 00120$:
                                    452 ;	user/max7219.c: 97: if(row < 0 || row > 7 || col < 0 || col > matrix.maxLed*8) return;
      008CBE 7B 0B            [ 1]  453 	ld	a, (0x0b, sp)
      008CC0 A1 07            [ 1]  454 	cp	a, #0x07
      008CC2 22 33            [ 1]  455 	jrugt	00109$
      008CC4 4F               [ 1]  456 	clr	a
      008CC5 95               [ 1]  457 	ld	xh, a
      008CC6 58               [ 2]  458 	sllw	x
      008CC7 58               [ 2]  459 	sllw	x
      008CC8 58               [ 2]  460 	sllw	x
      008CC9 7B 0A            [ 1]  461 	ld	a, (0x0a, sp)
      008CCB 6B 04            [ 1]  462 	ld	(0x04, sp), a
      008CCD 0F 03            [ 1]  463 	clr	(0x03, sp)
      008CCF 13 03            [ 2]  464 	cpw	x, (0x03, sp)
      008CD1 2F 24            [ 1]  465 	jrslt	00109$
                                    466 ;	user/max7219.c: 99: matrix.buffer[offset] |= val;
      008CD3 1E 06            [ 2]  467 	ldw	x, (0x06, sp)
      008CD5 1C 00 06         [ 2]  468 	addw	x, #0x0006
      008CD8 9F               [ 1]  469 	ld	a, xl
      008CD9 1B 01            [ 1]  470 	add	a, (0x01, sp)
      008CDB 02               [ 1]  471 	rlwa	x
      008CDC A9 00            [ 1]  472 	adc	a, #0x00
      008CDE 95               [ 1]  473 	ld	xh, a
      008CDF F6               [ 1]  474 	ld	a, (x)
                                    475 ;	user/max7219.c: 98: if(value)
      008CE0 0D 0C            [ 1]  476 	tnz	(0x0c, sp)
      008CE2 27 09            [ 1]  477 	jreq	00107$
                                    478 ;	user/max7219.c: 99: matrix.buffer[offset] |= val;
      008CE4 90 89            [ 2]  479 	pushw	y
      008CE6 1A 02            [ 1]  480 	or	a, (2, sp)
      008CE8 90 85            [ 2]  481 	popw	y
      008CEA F7               [ 1]  482 	ld	(x), a
      008CEB 20 0A            [ 2]  483 	jra	00109$
      008CED                        484 00107$:
                                    485 ;	user/max7219.c: 101: matrix.buffer[offset] &= ~val;
      008CED 88               [ 1]  486 	push	a
      008CEE 90 9F            [ 1]  487 	ld	a, yl
      008CF0 43               [ 1]  488 	cpl	a
      008CF1 6B 03            [ 1]  489 	ld	(0x03, sp), a
      008CF3 84               [ 1]  490 	pop	a
      008CF4 14 02            [ 1]  491 	and	a, (0x02, sp)
      008CF6 F7               [ 1]  492 	ld	(x), a
      008CF7                        493 00109$:
      008CF7 5B 07            [ 2]  494 	addw	sp, #7
      008CF9 81               [ 4]  495 	ret
                                    496 ;	user/max7219.c: 104: void setColumn(uint8_t col, uint8_t value)
                                    497 ;	-----------------------------------------
                                    498 ;	 function setColumn
                                    499 ;	-----------------------------------------
      008CFA                        500 _setColumn:
      008CFA 52 05            [ 2]  501 	sub	sp, #5
                                    502 ;	user/max7219.c: 107: if(col < 0 || col > matrix.maxLed*8) return;
      008CFC AE 00 D8         [ 2]  503 	ldw	x, #_matrix+5
      008CFF F6               [ 1]  504 	ld	a, (x)
      008D00 5F               [ 1]  505 	clrw	x
      008D01 97               [ 1]  506 	ld	xl, a
      008D02 58               [ 2]  507 	sllw	x
      008D03 58               [ 2]  508 	sllw	x
      008D04 58               [ 2]  509 	sllw	x
      008D05 7B 08            [ 1]  510 	ld	a, (0x08, sp)
      008D07 6B 05            [ 1]  511 	ld	(0x05, sp), a
      008D09 0F 04            [ 1]  512 	clr	(0x04, sp)
      008D0B 13 04            [ 2]  513 	cpw	x, (0x04, sp)
                                    514 ;	user/max7219.c: 108: for(row = 0; row < 8; row++)
      008D0D 2F 2D            [ 1]  515 	jrslt	00107$
      008D0F 0F 01            [ 1]  516 	clr	(0x01, sp)
      008D11                        517 00105$:
                                    518 ;	user/max7219.c: 110: val = value >> (7-row);
      008D11 7B 01            [ 1]  519 	ld	a, (0x01, sp)
      008D13 6B 03            [ 1]  520 	ld	(0x03, sp), a
      008D15 0F 02            [ 1]  521 	clr	(0x02, sp)
      008D17 AE 00 07         [ 2]  522 	ldw	x, #0x0007
      008D1A 72 F0 02         [ 2]  523 	subw	x, (0x02, sp)
      008D1D 7B 09            [ 1]  524 	ld	a, (0x09, sp)
      008D1F 88               [ 1]  525 	push	a
      008D20 9F               [ 1]  526 	ld	a, xl
      008D21 4D               [ 1]  527 	tnz	a
      008D22 27 05            [ 1]  528 	jreq	00120$
      008D24                        529 00119$:
      008D24 04 01            [ 1]  530 	srl	(1, sp)
      008D26 4A               [ 1]  531 	dec	a
      008D27 26 FB            [ 1]  532 	jrne	00119$
      008D29                        533 00120$:
      008D29 7B 02            [ 1]  534 	ld	a, (0x02, sp)
      008D2B 88               [ 1]  535 	push	a
      008D2C 7B 0A            [ 1]  536 	ld	a, (0x0a, sp)
      008D2E 88               [ 1]  537 	push	a
      008D2F CD 8C 8E         [ 4]  538 	call	_setDot
      008D32 5B 03            [ 2]  539 	addw	sp, #3
                                    540 ;	user/max7219.c: 108: for(row = 0; row < 8; row++)
      008D34 0C 01            [ 1]  541 	inc	(0x01, sp)
      008D36 7B 01            [ 1]  542 	ld	a, (0x01, sp)
      008D38 A1 08            [ 1]  543 	cp	a, #0x08
      008D3A 25 D5            [ 1]  544 	jrc	00105$
      008D3C                        545 00107$:
      008D3C 5B 05            [ 2]  546 	addw	sp, #5
      008D3E 81               [ 4]  547 	ret
                                    548 ;	user/max7219.c: 115: void setRow(uint8_t row, uint8_t value)
                                    549 ;	-----------------------------------------
                                    550 ;	 function setRow
                                    551 ;	-----------------------------------------
      008D3F                        552 _setRow:
      008D3F 52 05            [ 2]  553 	sub	sp, #5
                                    554 ;	user/max7219.c: 118: if(row < 0 || row > 7) return;
      008D41 7B 08            [ 1]  555 	ld	a, (0x08, sp)
      008D43 A1 07            [ 1]  556 	cp	a, #0x07
                                    557 ;	user/max7219.c: 119: for(i = 0; i < matrix.maxLed; i++)
      008D45 22 2A            [ 1]  558 	jrugt	00108$
      008D47 AE 00 D3         [ 2]  559 	ldw	x, #_matrix+0
      008D4A 1F 04            [ 2]  560 	ldw	(0x04, sp), x
      008D4C 16 04            [ 2]  561 	ldw	y, (0x04, sp)
      008D4E 0F 01            [ 1]  562 	clr	(0x01, sp)
      008D50                        563 00106$:
      008D50 90 E6 05         [ 1]  564 	ld	a, (0x5, y)
      008D53 11 01            [ 1]  565 	cp	a, (0x01, sp)
      008D55 23 1A            [ 2]  566 	jrule	00108$
                                    567 ;	user/max7219.c: 121: offset = (i*8)+row;
      008D57 7B 01            [ 1]  568 	ld	a, (0x01, sp)
      008D59 48               [ 1]  569 	sll	a
      008D5A 48               [ 1]  570 	sll	a
      008D5B 48               [ 1]  571 	sll	a
      008D5C 1B 08            [ 1]  572 	add	a, (0x08, sp)
                                    573 ;	user/max7219.c: 122: matrix.buffer[offset] = value;
      008D5E 1E 04            [ 2]  574 	ldw	x, (0x04, sp)
      008D60 1C 00 06         [ 2]  575 	addw	x, #0x0006
      008D63 1F 02            [ 2]  576 	ldw	(0x02, sp), x
      008D65 5F               [ 1]  577 	clrw	x
      008D66 97               [ 1]  578 	ld	xl, a
      008D67 72 FB 02         [ 2]  579 	addw	x, (0x02, sp)
      008D6A 7B 09            [ 1]  580 	ld	a, (0x09, sp)
      008D6C F7               [ 1]  581 	ld	(x), a
                                    582 ;	user/max7219.c: 119: for(i = 0; i < matrix.maxLed; i++)
      008D6D 0C 01            [ 1]  583 	inc	(0x01, sp)
      008D6F 20 DF            [ 2]  584 	jra	00106$
      008D71                        585 00108$:
      008D71 5B 05            [ 2]  586 	addw	sp, #5
      008D73 81               [ 4]  587 	ret
                                    588 ;	user/max7219.c: 127: void DrawEx(uint8_t scrollCnt, uint8_t *data)
                                    589 ;	-----------------------------------------
                                    590 ;	 function DrawEx
                                    591 ;	-----------------------------------------
      008D74                        592 _DrawEx:
      008D74 52 0B            [ 2]  593 	sub	sp, #11
                                    594 ;	user/max7219.c: 133: Clear();
      008D76 CD 8B F8         [ 4]  595 	call	_Clear
                                    596 ;	user/max7219.c: 134: for(cntC = 0; cntC < matrix.maxLed*8; cntC++)
      008D79 AE 00 D8         [ 2]  597 	ldw	x, #_matrix+5
      008D7C 1F 0A            [ 2]  598 	ldw	(0x0a, sp), x
      008D7E 0F 01            [ 1]  599 	clr	(0x01, sp)
      008D80                        600 00109$:
      008D80 1E 0A            [ 2]  601 	ldw	x, (0x0a, sp)
      008D82 F6               [ 1]  602 	ld	a, (x)
      008D83 5F               [ 1]  603 	clrw	x
      008D84 97               [ 1]  604 	ld	xl, a
      008D85 58               [ 2]  605 	sllw	x
      008D86 58               [ 2]  606 	sllw	x
      008D87 58               [ 2]  607 	sllw	x
      008D88 1F 08            [ 2]  608 	ldw	(0x08, sp), x
      008D8A 7B 01            [ 1]  609 	ld	a, (0x01, sp)
      008D8C 6B 07            [ 1]  610 	ld	(0x07, sp), a
      008D8E 0F 06            [ 1]  611 	clr	(0x06, sp)
      008D90 1E 06            [ 2]  612 	ldw	x, (0x06, sp)
      008D92 13 08            [ 2]  613 	cpw	x, (0x08, sp)
      008D94 2E 4A            [ 1]  614 	jrsge	00111$
                                    615 ;	user/max7219.c: 136: dataGet = data[cntC+scrollCnt];
      008D96 5F               [ 1]  616 	clrw	x
      008D97 7B 0E            [ 1]  617 	ld	a, (0x0e, sp)
      008D99 97               [ 1]  618 	ld	xl, a
      008D9A 72 FB 06         [ 2]  619 	addw	x, (0x06, sp)
      008D9D 72 FB 0F         [ 2]  620 	addw	x, (0x0f, sp)
      008DA0 F6               [ 1]  621 	ld	a, (x)
      008DA1 6B 03            [ 1]  622 	ld	(0x03, sp), a
                                    623 ;	user/max7219.c: 137: mask = 0x01;
      008DA3 A6 01            [ 1]  624 	ld	a, #0x01
      008DA5 6B 04            [ 1]  625 	ld	(0x04, sp), a
                                    626 ;	user/max7219.c: 138: for(cntR = 0; cntR<8; cntR++)
      008DA7 0F 02            [ 1]  627 	clr	(0x02, sp)
      008DA9                        628 00106$:
                                    629 ;	user/max7219.c: 141: setDot(cntC, 8 - cntR-1, 1);
      008DA9 A6 07            [ 1]  630 	ld	a, #0x07
      008DAB 10 02            [ 1]  631 	sub	a, (0x02, sp)
      008DAD 6B 05            [ 1]  632 	ld	(0x05, sp), a
                                    633 ;	user/max7219.c: 140: if(dataGet&mask)
      008DAF 7B 03            [ 1]  634 	ld	a, (0x03, sp)
      008DB1 14 04            [ 1]  635 	and	a, (0x04, sp)
      008DB3 4D               [ 1]  636 	tnz	a
      008DB4 27 0F            [ 1]  637 	jreq	00102$
                                    638 ;	user/max7219.c: 141: setDot(cntC, 8 - cntR-1, 1);
      008DB6 4B 01            [ 1]  639 	push	#0x01
      008DB8 7B 06            [ 1]  640 	ld	a, (0x06, sp)
      008DBA 88               [ 1]  641 	push	a
      008DBB 7B 03            [ 1]  642 	ld	a, (0x03, sp)
      008DBD 88               [ 1]  643 	push	a
      008DBE CD 8C 8E         [ 4]  644 	call	_setDot
      008DC1 5B 03            [ 2]  645 	addw	sp, #3
      008DC3 20 0D            [ 2]  646 	jra	00103$
      008DC5                        647 00102$:
                                    648 ;	user/max7219.c: 143: setDot(cntC, 8 - cntR-1, 0);
      008DC5 4B 00            [ 1]  649 	push	#0x00
      008DC7 7B 06            [ 1]  650 	ld	a, (0x06, sp)
      008DC9 88               [ 1]  651 	push	a
      008DCA 7B 03            [ 1]  652 	ld	a, (0x03, sp)
      008DCC 88               [ 1]  653 	push	a
      008DCD CD 8C 8E         [ 4]  654 	call	_setDot
      008DD0 5B 03            [ 2]  655 	addw	sp, #3
      008DD2                        656 00103$:
                                    657 ;	user/max7219.c: 144: mask <<=1;
      008DD2 08 04            [ 1]  658 	sll	(0x04, sp)
                                    659 ;	user/max7219.c: 138: for(cntR = 0; cntR<8; cntR++)
      008DD4 0C 02            [ 1]  660 	inc	(0x02, sp)
      008DD6 7B 02            [ 1]  661 	ld	a, (0x02, sp)
      008DD8 A1 08            [ 1]  662 	cp	a, #0x08
      008DDA 25 CD            [ 1]  663 	jrc	00106$
                                    664 ;	user/max7219.c: 134: for(cntC = 0; cntC < matrix.maxLed*8; cntC++)
      008DDC 0C 01            [ 1]  665 	inc	(0x01, sp)
      008DDE 20 A0            [ 2]  666 	jra	00109$
      008DE0                        667 00111$:
      008DE0 5B 0B            [ 2]  668 	addw	sp, #11
      008DE2 81               [ 4]  669 	ret
                                    670 	.area CODE
                                    671 	.area INITIALIZER
                                    672 	.area CABS (ABS)
