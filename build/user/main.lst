                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TIM4_UPD_OVF_IRQHandler
                                     13 	.globl _delay
                                     14 	.globl _TEXT_Manage
                                     15 	.globl _TEXT_GetStringToBuff
                                     16 	.globl _TEXT_Init
                                     17 	.globl _TIMER_Inc
                                     18 	.globl _TIMER_Init
                                     19 	.globl _Screen
                                     20 	.globl _Init
                                     21 	.globl _MaxMatrix
                                     22 	.globl _TIM4_ClearITPendingBit
                                     23 	.globl _IWDG_Enable
                                     24 	.globl _IWDG_ReloadCounter
                                     25 	.globl _IWDG_SetReload
                                     26 	.globl _IWDG_SetPrescaler
                                     27 	.globl _IWDG_WriteAccessCmd
                                     28 	.globl _CLK_Config
                                     29 	.globl _IWDG_Config
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DATA
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area INITIALIZED
                                     38 ;--------------------------------------------------------
                                     39 ; Stack segment in internal ram 
                                     40 ;--------------------------------------------------------
                                     41 	.area	SSEG
      000000                         42 __start__stack:
      000000                         43 	.ds	1
                                     44 
                                     45 ;--------------------------------------------------------
                                     46 ; absolute external ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DABS (ABS)
                                     49 ;--------------------------------------------------------
                                     50 ; interrupt vector 
                                     51 ;--------------------------------------------------------
                                     52 	.area HOME
      000000                         53 __interrupt_vect:
      000000 82v00u00u00             54 	int s_GSINIT ;reset
      000004 82 00 00 00             55 	int 0x0000 ;trap
      000008 82 00 00 00             56 	int 0x0000 ;int0
      00000C 82 00 00 00             57 	int 0x0000 ;int1
      000010 82 00 00 00             58 	int 0x0000 ;int2
      000014 82 00 00 00             59 	int 0x0000 ;int3
      000018 82 00 00 00             60 	int 0x0000 ;int4
      00001C 82 00 00 00             61 	int 0x0000 ;int5
      000020 82 00 00 00             62 	int 0x0000 ;int6
      000024 82 00 00 00             63 	int 0x0000 ;int7
      000028 82 00 00 00             64 	int 0x0000 ;int8
      00002C 82 00 00 00             65 	int 0x0000 ;int9
      000030 82 00 00 00             66 	int 0x0000 ;int10
      000034 82 00 00 00             67 	int 0x0000 ;int11
      000038 82 00 00 00             68 	int 0x0000 ;int12
      00003C 82 00 00 00             69 	int 0x0000 ;int13
      000040 82 00 00 00             70 	int 0x0000 ;int14
      000044 82 00 00 00             71 	int 0x0000 ;int15
      000048 82 00 00 00             72 	int 0x0000 ;int16
      00004C 82 00 00 00             73 	int 0x0000 ;int17
      000050 82 00 00 00             74 	int 0x0000 ;int18
      000054 82 00 00 00             75 	int 0x0000 ;int19
      000058 82 00 00 00             76 	int 0x0000 ;int20
      00005C 82 00 00 00             77 	int 0x0000 ;int21
      000060 82 00 00 00             78 	int 0x0000 ;int22
      000064 82v00u00u0C             79 	int _TIM4_UPD_OVF_IRQHandler ;int23
      000068 82 00 00 00             80 	int 0x0000 ;int24
      00006C 82 00 00 00             81 	int 0x0000 ;int25
      000070 82 00 00 00             82 	int 0x0000 ;int26
      000074 82 00 00 00             83 	int 0x0000 ;int27
      000078 82 00 00 00             84 	int 0x0000 ;int28
      00007C 82 00 00 00             85 	int 0x0000 ;int29
                                     86 ;--------------------------------------------------------
                                     87 ; global & static initialisations
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME
                                     90 	.area GSINIT
                                     91 	.area GSFINAL
                                     92 	.area GSINIT
      000000                         93 __sdcc_gs_init_startup:
      000000                         94 __sdcc_init_data:
                                     95 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   96 	ldw x, #l_DATA
      000003 27 07            [ 1]   97 	jreq	00002$
      000005                         98 00001$:
      000005 72 4FuFFuFF      [ 1]   99 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  100 	decw x
      00000A 26 F9            [ 1]  101 	jrne	00001$
      00000C                        102 00002$:
      00000C AEr00r00         [ 2]  103 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  104 	jreq	00004$
      000011                        105 00003$:
      000011 D6uFFuFF         [ 1]  106 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  107 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  108 	decw	x
      000018 26 F7            [ 1]  109 	jrne	00003$
      00001A                        110 00004$:
                                    111 ; stm8_genXINIT() end
                                    112 	.area GSFINAL
      000000 CCr00r80         [ 2]  113 	jp	__sdcc_program_startup
                                    114 ;--------------------------------------------------------
                                    115 ; Home
                                    116 ;--------------------------------------------------------
                                    117 	.area HOME
                                    118 	.area HOME
      000080                        119 __sdcc_program_startup:
      000080 CCr00r32         [ 2]  120 	jp	_main
                                    121 ;	return from main will return to caller
                                    122 ;--------------------------------------------------------
                                    123 ; code
                                    124 ;--------------------------------------------------------
                                    125 	.area CODE
                                    126 ;	user/main.c: 27: void delay(uint16_t x)
                                    127 ;	-----------------------------------------
                                    128 ;	 function delay
                                    129 ;	-----------------------------------------
      000000                        130 _delay:
      000000 89               [ 2]  131 	pushw	x
                                    132 ;	user/main.c: 29: while(x--);
      000001 1E 05            [ 2]  133 	ldw	x, (0x05, sp)
      000003                        134 00101$:
      000003 1F 01            [ 2]  135 	ldw	(0x01, sp), x
      000005 5A               [ 2]  136 	decw	x
      000006 16 01            [ 2]  137 	ldw	y, (0x01, sp)
      000008 26 F9            [ 1]  138 	jrne	00101$
      00000A 85               [ 2]  139 	popw	x
      00000B 81               [ 4]  140 	ret
                                    141 ;	user/main.c: 32: INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
                                    142 ;	-----------------------------------------
                                    143 ;	 function TIM4_UPD_OVF_IRQHandler
                                    144 ;	-----------------------------------------
      00000C                        145 _TIM4_UPD_OVF_IRQHandler:
      00000C 62               [ 2]  146 	div	x, a
                                    147 ;	user/main.c: 34: TIM4_ClearITPendingBit(TIM4_IT_UPDATE);
      00000D 4B 01            [ 1]  148 	push	#0x01
      00000F CDr00r00         [ 4]  149 	call	_TIM4_ClearITPendingBit
      000012 84               [ 1]  150 	pop	a
                                    151 ;	user/main.c: 35: TIMER_Inc();
      000013 CDr00r00         [ 4]  152 	call	_TIMER_Inc
                                    153 ;	user/main.c: 36: IWDG_ReloadCounter();
      000016 CDr00r00         [ 4]  154 	call	_IWDG_ReloadCounter
      000019 80               [11]  155 	iret
                                    156 ;	user/main.c: 39: void IWDG_Config(void)
                                    157 ;	-----------------------------------------
                                    158 ;	 function IWDG_Config
                                    159 ;	-----------------------------------------
      00001A                        160 _IWDG_Config:
                                    161 ;	user/main.c: 43: IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
      00001A 4B 55            [ 1]  162 	push	#0x55
      00001C CDr00r00         [ 4]  163 	call	_IWDG_WriteAccessCmd
      00001F 84               [ 1]  164 	pop	a
                                    165 ;	user/main.c: 45: IWDG_SetPrescaler(IWDG_Prescaler_256);
      000020 4B 06            [ 1]  166 	push	#0x06
      000022 CDr00r00         [ 4]  167 	call	_IWDG_SetPrescaler
      000025 84               [ 1]  168 	pop	a
                                    169 ;	user/main.c: 49: IWDG_SetReload(250);
      000026 4B FA            [ 1]  170 	push	#0xfa
      000028 CDr00r00         [ 4]  171 	call	_IWDG_SetReload
      00002B 84               [ 1]  172 	pop	a
                                    173 ;	user/main.c: 51: IWDG_ReloadCounter();
      00002C CDr00r00         [ 4]  174 	call	_IWDG_ReloadCounter
                                    175 ;	user/main.c: 53: IWDG_Enable();
      00002F CCr00r00         [ 2]  176 	jp	_IWDG_Enable
                                    177 ;	user/main.c: 57: void main() 
                                    178 ;	-----------------------------------------
                                    179 ;	 function main
                                    180 ;	-----------------------------------------
      000032                        181 _main:
      000032 52 14            [ 2]  182 	sub	sp, #20
                                    183 ;	user/main.c: 61: uint8_t buff[] = "TRUONG TRUNG NHAN";
      000034 96               [ 1]  184 	ldw	x, sp
      000035 5C               [ 2]  185 	incw	x
      000036 1F 13            [ 2]  186 	ldw	(0x13, sp), x
      000038 1E 13            [ 2]  187 	ldw	x, (0x13, sp)
      00003A A6 54            [ 1]  188 	ld	a, #0x54
      00003C F7               [ 1]  189 	ld	(x), a
      00003D 1E 13            [ 2]  190 	ldw	x, (0x13, sp)
      00003F 5C               [ 2]  191 	incw	x
      000040 A6 52            [ 1]  192 	ld	a, #0x52
      000042 F7               [ 1]  193 	ld	(x), a
      000043 1E 13            [ 2]  194 	ldw	x, (0x13, sp)
      000045 5C               [ 2]  195 	incw	x
      000046 5C               [ 2]  196 	incw	x
      000047 A6 55            [ 1]  197 	ld	a, #0x55
      000049 F7               [ 1]  198 	ld	(x), a
      00004A 1E 13            [ 2]  199 	ldw	x, (0x13, sp)
      00004C A6 4F            [ 1]  200 	ld	a, #0x4f
      00004E E7 03            [ 1]  201 	ld	(0x0003, x), a
      000050 1E 13            [ 2]  202 	ldw	x, (0x13, sp)
      000052 A6 4E            [ 1]  203 	ld	a, #0x4e
      000054 E7 04            [ 1]  204 	ld	(0x0004, x), a
      000056 1E 13            [ 2]  205 	ldw	x, (0x13, sp)
      000058 A6 47            [ 1]  206 	ld	a, #0x47
      00005A E7 05            [ 1]  207 	ld	(0x0005, x), a
      00005C 1E 13            [ 2]  208 	ldw	x, (0x13, sp)
      00005E A6 20            [ 1]  209 	ld	a, #0x20
      000060 E7 06            [ 1]  210 	ld	(0x0006, x), a
      000062 1E 13            [ 2]  211 	ldw	x, (0x13, sp)
      000064 A6 54            [ 1]  212 	ld	a, #0x54
      000066 E7 07            [ 1]  213 	ld	(0x0007, x), a
      000068 1E 13            [ 2]  214 	ldw	x, (0x13, sp)
      00006A A6 52            [ 1]  215 	ld	a, #0x52
      00006C E7 08            [ 1]  216 	ld	(0x0008, x), a
      00006E 1E 13            [ 2]  217 	ldw	x, (0x13, sp)
      000070 A6 55            [ 1]  218 	ld	a, #0x55
      000072 E7 09            [ 1]  219 	ld	(0x0009, x), a
      000074 1E 13            [ 2]  220 	ldw	x, (0x13, sp)
      000076 A6 4E            [ 1]  221 	ld	a, #0x4e
      000078 E7 0A            [ 1]  222 	ld	(0x000a, x), a
      00007A 1E 13            [ 2]  223 	ldw	x, (0x13, sp)
      00007C A6 47            [ 1]  224 	ld	a, #0x47
      00007E E7 0B            [ 1]  225 	ld	(0x000b, x), a
      000080 1E 13            [ 2]  226 	ldw	x, (0x13, sp)
      000082 A6 20            [ 1]  227 	ld	a, #0x20
      000084 E7 0C            [ 1]  228 	ld	(0x000c, x), a
      000086 1E 13            [ 2]  229 	ldw	x, (0x13, sp)
      000088 A6 4E            [ 1]  230 	ld	a, #0x4e
      00008A E7 0D            [ 1]  231 	ld	(0x000d, x), a
      00008C 1E 13            [ 2]  232 	ldw	x, (0x13, sp)
      00008E A6 48            [ 1]  233 	ld	a, #0x48
      000090 E7 0E            [ 1]  234 	ld	(0x000e, x), a
      000092 1E 13            [ 2]  235 	ldw	x, (0x13, sp)
      000094 A6 41            [ 1]  236 	ld	a, #0x41
      000096 E7 0F            [ 1]  237 	ld	(0x000f, x), a
      000098 1E 13            [ 2]  238 	ldw	x, (0x13, sp)
      00009A A6 4E            [ 1]  239 	ld	a, #0x4e
      00009C E7 10            [ 1]  240 	ld	(0x0010, x), a
      00009E 1E 13            [ 2]  241 	ldw	x, (0x13, sp)
      0000A0 1C 00 11         [ 2]  242 	addw	x, #0x0011
      0000A3 7F               [ 1]  243 	clr	(x)
                                    244 ;	user/main.c: 64: CLK_Config();
      0000A4 CDr00r00         [ 4]  245 	call	_CLK_Config
                                    246 ;	user/main.c: 67: MaxMatrix(GPIOC, GPIO_PIN_6, GPIO_PIN_4, GPIO_PIN_5, 8);
      0000A7 4B 08            [ 1]  247 	push	#0x08
      0000A9 4B 20            [ 1]  248 	push	#0x20
      0000AB 4B 10            [ 1]  249 	push	#0x10
      0000AD 4B 40            [ 1]  250 	push	#0x40
      0000AF 4B 0A            [ 1]  251 	push	#0x0a
      0000B1 4B 50            [ 1]  252 	push	#0x50
      0000B3 CDr00r00         [ 4]  253 	call	_MaxMatrix
      0000B6 5B 06            [ 2]  254 	addw	sp, #6
                                    255 ;	user/main.c: 68: Init();
      0000B8 CDr00r00         [ 4]  256 	call	_Init
                                    257 ;	user/main.c: 69: Screen();
      0000BB CDr00r00         [ 4]  258 	call	_Screen
                                    259 ;	user/main.c: 70: TEXT_Init();
      0000BE CDr00r00         [ 4]  260 	call	_TEXT_Init
                                    261 ;	user/main.c: 71: TIMER_Init();
      0000C1 CDr00r00         [ 4]  262 	call	_TIMER_Init
                                    263 ;	user/main.c: 72: IWDG_Config();
      0000C4 CDr00r1A         [ 4]  264 	call	_IWDG_Config
                                    265 ;	user/main.c: 73: enableInterrupts();
      0000C7 9A               [ 1]  266 	rim
                                    267 ;	user/main.c: 74: TEXT_GetStringToBuff(buff);
      0000C8 1E 13            [ 2]  268 	ldw	x, (0x13, sp)
      0000CA 89               [ 2]  269 	pushw	x
      0000CB CDr00r00         [ 4]  270 	call	_TEXT_GetStringToBuff
      0000CE 85               [ 2]  271 	popw	x
                                    272 ;	user/main.c: 104: while(TRUE) 
      0000CF                        273 00102$:
                                    274 ;	user/main.c: 106: TEXT_Manage();
      0000CF CDr00r00         [ 4]  275 	call	_TEXT_Manage
      0000D2 20 FB            [ 2]  276 	jra	00102$
      0000D4 5B 14            [ 2]  277 	addw	sp, #20
      0000D6 81               [ 4]  278 	ret
                                    279 	.area CODE
                                    280 	.area INITIALIZER
                                    281 	.area CABS (ABS)
